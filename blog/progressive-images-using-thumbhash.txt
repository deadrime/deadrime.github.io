4:I[5613,[],""]
5:I[1778,[],""]
6:I[1769,["174","static/chunks/174-8e9eed3881b7809b.js","956","static/chunks/956-58e65a7b18ba4fa9.js","185","static/chunks/app/layout-f21b52441b0663c9.js"],"ThemeProvider"]
7:I[5250,["911","static/chunks/d2af3f89-c53dca3c0dccae07.js","174","static/chunks/174-8e9eed3881b7809b.js","568","static/chunks/568-50733f35e6378467.js","581","static/chunks/581-bc19f37c8683d0af.js","206","static/chunks/app/blog/%5Bslug%5D/layout-5dd5a28269546c6a.js"],""]
8:I[5630,["174","static/chunks/174-8e9eed3881b7809b.js","956","static/chunks/956-58e65a7b18ba4fa9.js","185","static/chunks/app/layout-f21b52441b0663c9.js"],""]
0:["f1rgCZ3n1FGKCcVeoKwIC",[[["",{"children":["blog",{"children":[["slug","progressive-images-using-thumbhash","d"],{"children":["__PAGE__?{\"slug\":\"progressive-images-using-thumbhash\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","progressive-images-using-thumbhash","d"],{"children":["__PAGE__",{},["$L1","$L2",null]]},[null,"$L3",null]]},["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/8166fd224e101e31.css","precedence":"next","crossOrigin":""}]]}]]},[null,["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__variable_baa796 __variable_ff450d __variable_f72f74 min-h-screen flex flex-col gap-4","children":[["$","script",null,{"id":"theme-hydration","dangerouslySetInnerHTML":{"__html":"\n!function() {\n  const preferredDarkModeBySystem = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n  const savedTheme = localStorage.getItem(\"selectedTheme\");\n  const theme = savedTheme ? savedTheme : preferredDarkModeBySystem ? 'dark' : 'light';\n  document.documentElement.setAttribute('data-theme', theme);\n}();\n"}}],["$","$L6",null,{"children":[["$","header",null,{"style":{"maxWidth":1180},"className":"w-full mx-auto px-3 md:px-8 py-4 flex items-center","children":[["$","$L7",null,{"href":"/","className":"font-code text-md","children":["<","Zhenya",">"]}],["$","$L8",null,{"className":"ml-auto"}]]}],["$","main",null,{"style":{"maxWidth":1180},"className":"w-full mx-auto px-3 md:px-8 py-4","children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}],["$","footer",null,{"style":{"maxWidth":1180},"className":"w-full mx-auto px-3 md:px-8 py-4 mt-auto","children":["$","$L7",null,{"href":"/","className":"font-code text-md","children":["</","Zhenya",">"]}]}]]}]]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/ecd4ec345f4c4837.css","precedence":"next","crossOrigin":""}]],"$L9"]]]]
a:I[1749,["911","static/chunks/d2af3f89-c53dca3c0dccae07.js","174","static/chunks/174-8e9eed3881b7809b.js","568","static/chunks/568-50733f35e6378467.js","581","static/chunks/581-bc19f37c8683d0af.js","206","static/chunks/app/blog/%5Bslug%5D/layout-5dd5a28269546c6a.js"],"Image"]
b:I[4818,["911","static/chunks/d2af3f89-c53dca3c0dccae07.js","174","static/chunks/174-8e9eed3881b7809b.js","568","static/chunks/568-50733f35e6378467.js","581","static/chunks/581-bc19f37c8683d0af.js","206","static/chunks/app/blog/%5Bslug%5D/layout-5dd5a28269546c6a.js"],""]
c:I[1202,["911","static/chunks/d2af3f89-c53dca3c0dccae07.js","174","static/chunks/174-8e9eed3881b7809b.js","568","static/chunks/568-50733f35e6378467.js","581","static/chunks/581-bc19f37c8683d0af.js","206","static/chunks/app/blog/%5Bslug%5D/layout-5dd5a28269546c6a.js"],""]
e:I[877,["911","static/chunks/d2af3f89-c53dca3c0dccae07.js","174","static/chunks/174-8e9eed3881b7809b.js","568","static/chunks/568-50733f35e6378467.js","581","static/chunks/581-bc19f37c8683d0af.js","206","static/chunks/app/blog/%5Bslug%5D/layout-5dd5a28269546c6a.js"],"TableOfContent"]
2:[["$","div",null,{"className":"flex min-h-screen flex-col justify-between","children":["\n","\n",["$","h2",null,{"id":"why","children":"Зачем оно вообще нужно"}],"\n",["$","p",null,{"children":"Для начала поговорим про цифры. Если вы когда-нибудь делали аналитику сайта - то вы в курсе, что изображения весьма прожорливые. Скорее всего даже более прожорливые, чем ваш бандл.\nПеред тем, как пытаться оптимизировать что-либо еще - лучше начать именно с картинок."}],"\n",["$","p",null,{"children":["Однако даже если использовать ",["$","code",null,{"className":"$undefined","children":"WEBP"}]," или ",["$","code",null,{"className":"$undefined","children":"AVIF"}]," - картинки все равно будут весить неприлично много.\nОсобенно если их много.\nПри этом всегда стоит держать в голове, что среднестатистический пользователь вашего сайта скорее всего зайдет с мобильного телефона.\nИ у него вряд ли будет быстрый мобильный интернет. А медленный интернет накладывает свои ограничения:"]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":"UI может прыгать, пока все картинки не загрузятся (сделаем допущение, что вы не хотите или не можете привести все картинки к одному размеру)"}],"\n",["$","li",null,{"children":"При медленном интернете или если сервер слишком далеко от пользователя, он будет видеть огрызки картинок, что прямо скажем не красиво."}],"\n"]}],"\n",["$","figure",null,{"className":"img-wrapper","children":[["$","img",null,{"src":"https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExNXJtZTh4dGJ2bDBiMnVuZHJkMmc2cWQxZzFkdGdzOXJxYjdhbGYzbSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/QIQTfximd3AuQ/giphy.gif","alt":"Раздражает, правда?","width":"$undefined","height":"$undefined","className":"rounded"}],["$","figcaption",null,{"className":"pt-2 text-body2 text-text-primary/70","children":"Раздражает, правда?"}]]}],"\n",["$","p",null,{"children":["А еще пользователь у нас очень привередливый и если мы не покажем ему хоть что-то в течении первых пары секунд - скорее всего мы его потеряем.\nИменно проблему ",["$","strong",null,{"children":"показать хоть что-то"}]," и призвана решить прогрессивная загрузка изображений."]}],"\n",["$","p",null,{"children":"Идея заключается в том, что мы показываем пользователю миниатюру в низком разрешении, пока грузим оригинальную картинку."}],"\n",["$","figure",null,{"className":"img-wrapper","children":[["$","$La",null,{"src":"/_next/static/media/telegram-example.84e34859.png","alt":"Пример из telegram","height":210,"width":209,"className":"rounded"}],["$","figcaption",null,{"className":"pt-2 text-body2 text-text-primary/70","children":"Пример из telegram"}]]}],"\n",["$","p",null,{"children":"Для реализации такого подхода я выбрал либу thumbhash, она весит < 4kb и позволяет хранить хеш весом всего 30-40 байт."}],"\n",["$","div",null,{"className":"p-4 flex flex-col items-center justify-center","children":["$","$Lb",null,{}]}],"\n",["$","p",null,{"children":["Еще примеры можно найти на официальном сайте: ",["$","a",null,{"href":"https://evanw.github.io/thumbhash/","rel":"nofollow","target":"_blank","children":"https://evanw.github.io/thumbhash/"}]]}],"\n",["$","h2",null,{"id":"generate-thumbhash-on-client-side","children":"Генерация thumbhash на клиенте"}],"\n",["$","p",null,{"children":"Рассмотрим кейс, когда пользователь создает новый пост и сам загружает изображение. В этом случае сгенерировать thumb можно прямо на клиенте."}],"\n",["$","p",null,{"children":["Для начала загрузка изображения - тут все стандартно, подписываемся на ",["$","code",null,{"className":"$undefined","children":"onChange"}]," у инпута и достаем оттуда файл"]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"import { useCallback, useState } from \"react\";\n\nconst loadImage = (imageUrl: string) => {\n  return new Promise<HTMLImageElement>((resolve) => {\n    const img = new Image();\n\n    img.src = imageUrl;\n\n    img.onload = () => {\n      resolve(img);\n    };\n  });\n};\n\nconst getImageUrl = (file: File) => {\n  // You can implement your own upload logic here\n  // For example we just create url on client-side\n  const url = URL.createObjectURL(file); \n  return url;\n}\n\nexport default function App() {\n  const [originalImageSrc, setOriginalImageSrc] = useState(\"\");\n\n  const handleFileUpload = useCallback(\n    async (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (!event.target.files?.length) {\n        return;\n      }\n      const file = event.target.files[0];\n      const url = await getImageUrl(file);\n      setOriginalImageSrc(url);\n    },\n    []\n  );\n\n  return (\n    <div className=\"App\">\n      <input type=\"file\" onChange={handleFileUpload} />\n      <img src={originalImageSrc} />\n    </div>\n  );\n}\n","language":"tsx","highlightedLines":[]}]}],"\n",["$","p",null,{"children":"Теперь нам необходимо считать файл как картинку, чтобы создать миниатюру."}],"\n",["$","p",null,{"children":["Для этого напишем небольшой хелпер, который загружает картинку по переданному url и возвращает ",["$","code",null,{"className":"$undefined","children":"HTMLImageElement"}]]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"const loadImage = (imageUrl: string) => {\n  return new Promise<HTMLImageElement>((resolve) => {\n    const img = new Image();\n    img.src = imageUrl;\n\n    img.onload = () => {\n      resolve(img);\n    };\n  });\n};\n","language":"ts","highlightedLines":[]}]}],"\n",["$","p",null,{"children":["Теперь необходимо создать миниатюру изображения, для этого воспользуемся ",["$","code",null,{"className":"$undefined","children":"canvas"}],":"]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"const size = Math.max(img.width, img.height);\nconst w = img.width = Math.round(100 * img.width / size);\nconst h = img.height = Math.round(100 * img.height / size);\n\n// Create image thumb (100x100 maximum size)\nconst canvas = document.createElement('canvas');\nconst c = canvas.getContext('2d');\ncanvas.width = w;\ncanvas.height = h;\nc.drawImage(img, 0, 0, w, h);\n","language":"ts","highlightedLines":[]}]}],"\n",["$","p",null,{"children":["После чего достаем из полученной миниатюры ",["$","a",null,{"href":"https://developer.mozilla.org/en-US/docs/Web/API/ImageData","rel":"nofollow","target":"_blank","children":["$","code",null,{"className":"$undefined","children":"ImageData"}]}]," и скармливаем полученный массив пикселей методу ",["$","code",null,{"className":"$undefined","children":"rgbaToThumbHash"}],"."]}],"\n",["$","p",null,{"children":["Полученный ",["$","strong",null,{"children":"Uint8Array"}]," я конвертирую в ",["$","strong",null,{"children":"base64"}]," строку, которую мы затем можем сохранить на сервере."]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"import { rgbaToThumbHash } from 'thumbhash';\n\nasync function generateImageThumb(img: HTMLImageElement) {\n  const size = Math.max(img.width, img.height);\n  const w = img.width = Math.round(100 * img.width / size);\n  const h = img.height = Math.round(100 * img.height / size);\n\n  // // Create image thumb (100x100 maximum size)\n  const canvas = document.createElement('canvas');\n  const c = canvas.getContext('2d');\n  canvas.width = w;\n  canvas.height = h;\n  c.drawImage(img, 0, 0, w, h);\n\t// Get pixels array\n  const pixels = c.getImageData(0, 0, w, h);\n\t// Get thumbhash (Uint8Array)\n  const hash = rgbaToThumbHash(w, h, pixels.data);\n\t// convert Uint8Array to base64 string\n  const binString = String.fromCodePoint(...hash);\n  return btoa(binString);\n}\n","language":"ts","highlightedLines":[14,16,18]}]}],"\n",["$","p",null,{"children":"В результате этих махинаций мы получаем такую строку"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"0ucJJgoHiHeId5eYV4d3hneYiHiPiPc=\n","language":"txt","highlightedLines":[]}]}],"\n",["$","p",null,{"children":"Весит она всего 32 байта"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"new Blob([\"0ucJJgoHiHeId5eYV4d3hneYiHiPiPc=\"]).size // 32\n","language":"ts","highlightedLines":[]}]}],"\n",["$","p",null,{"children":"Ее можно сохранить на сервере и присылать вместе с объектом поста"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"[\n\t{\n\t\tid: '1',\n\t\ttitle: 'Post title',\n\t\timage: '/path/to/image1.png',\n\t\tthumbhash: '0ucJJgoHiHeId5eYV4d3hneYiHiPiPc=',\n\t},\n\t// ...\n]\n","language":"ts","highlightedLines":[]}]}],"\n",["$","p",null,{"children":"Далее на клиенте нужно преобразовать ее сначала в Uint8Array, а затем в base64 картинку"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"const thumbToImageSrc = (thumb: string) => {\n  const binString = atob(thumb);\n  const data = Uint8Array.from(binString, (m) => m.codePointAt(0));\n  const src = thumbHashToDataURL(data);\n  return src;\n};\n","language":"ts","highlightedLines":[]}]}],"\n",["$","p",null,{"children":"Наконец нам нужен компонент, который будет запускать загрузку оригинальной картинки и отображать thumbhash миниатюру на время загрузки"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"type ProgressiveImageProps = {\n\tsrc: string;\n\tthumbHash: string;\n}\n\nconst ProgressiveImage: React.FC<ProgressiveImageProps> = ({ src: originalImageSrc, thumbHash }) => {\n  const thumb = useMemo(() => thumbHash ? thumbToImageSrc(thumbHash) : null, [thumbHash]);\n  const [imgSrc, setImgSrc] = useState(thumb ? thumb : originalImageSrc);\n\n  const loadOriginalImage = useCallback(async () => {\n    await loadImage(originalImageSrc);\n    setImgSrc(originalImageSrc);\n  }, [originalImageSrc]);\n\n  useEffect(() => {\n    if (thumbHash ) {\n      loadOriginalImage();\n    };\n  }, [loadOriginalImage, thumbHash]);\n\n  return (\n    <img src={imgSrc} />\n  );\n};\n","language":"tsx","highlightedLines":[]}]}],"\n",["$","h2",null,{"id":"generate-thumbhash-on-server-side","children":"Генерация thumbhash на сервере"}],"\n",["$","p",null,{"children":["Скорее всего будет использоваться ",["$","a",null,{"href":"https://developer.mozilla.org/ru/docs/Web/API/FormData","rel":"nofollow","target":"_blank","children":["$","code",null,{"className":"$undefined","children":"FormData"}]}],", чтобы загрузить файл на сервер."]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"export async function POST(request: NextRequest) {\n  const formData = await request.formData();\n  const file = formData.get('file') as File;\n\n  if (!file) {\n    return NextResponse.json({\n      code: 'FILE_NOT_FOUND'\n    }, {\n      status: 404\n    });\n  }\n\n  const arrayBuffer = await file.arrayBuffer();\n\tconst buffer = Buffer.from(arrayBuffer);\n\n  const url = await uploadFile(buffer); // save file on your server somehow\n\tconst thumbhash = await generateThumbhash(buffer); // We need to implement this\n\n\treturn NextResponse.json({\n\t\turl,\n    thumbhash\n  })\n}\n","language":"ts","highlightedLines":[]}]}],"\n",["$","h3",null,{"id":"generate-thumbhash-on-server-side-using-canvas","children":"При помощи canvas"}],"\n",["$","p",null,{"children":["Чтобы сгенерировать thumbhash, нужно считать данные изображения, только вот сервере у нас нет нативной поддержки canvas и нужно будет воспользоваться сторонней библиотекой, например ",["$","a",null,{"href":"https://www.npmjs.com/package/canvas","rel":"nofollow","target":"_blank","children":"https://www.npmjs.com/package/canvas"}]]}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"import { createCanvas, loadImage } from \"canvas\";\n\nasync function loadImageAndConvertToHashWithCanvas(\n  buffer: Buffer\n) {\n  const maxSize = 100;\n\t// load image\n  const image = await loadImage(buffer);\n  const width = image.width;\n  const height = image.height;\n\t// calculate new size\n  const scale = Math.min(maxSize / width, maxSize / height);\n  const resizedWidth = Math.floor(width * scale);\n  const resizedHeight = Math.floor(height * scale);\n\t// create thumb with new size\n  const canvas = createCanvas(resizedWidth, resizedHeight);\n  const ctx = canvas.getContext(\"2d\");\n  ctx.drawImage(image, 0, 0, resizedWidth, resizedHeight);\n\t// get pixels array\n  const imageData = ctx.getImageData(0, 0, resizedWidth, resizedHeight);\n  const rgba = new Uint8Array(imageData.data.buffer);\n\t// generate thumbhash\n  const hash = rgbaToThumbHash(resizedWidth, resizedHeight, rgba);\n\t// convert it to base64\n  const base64 = Buffer.from(hash).toString('base64');\n  return base64;\n}\n","language":"ts","highlightedLines":[]}]}],"\n",["$","h3",null,{"id":"generate-thumbhash-on-server-side-using-sharp","children":"При помощи sharp"}],"\n",["$","p",null,{"children":"Так же можно воспользоваться библиотекой sharp"}],"\n",["$","pre",null,{"children":["$","$Lc",null,{"caption":"$undefined","code":"import sharp from \"sharp\";\n\nconst loadImageAndConvertToHashWithSharp = async (buffer: Buffer) => {\n\t// load image\n  const sharpImage = sharp(buffer);\n  const imageMetadata = await sharpImage.metadata();\n\t// calculate new size\n  const size = Math.max(imageMetadata.width || 1, imageMetadata.height || 1);\n  const w = Math.round(100 * (imageMetadata.width || 1) / size);\n  const h = Math.round(100 * (imageMetadata.height || 1) / size);\n\t// create thumb with new size\n  const { data } = await sharpImage\n    .resize({\n      withoutEnlargement: true,\n      width: w,\n      height: h,\n    })\n    .ensureAlpha() // rgbaToThumbHash require 4 channals\n    .raw()\n    .toBuffer({ resolveWithObject: true })\n\t// generate thumbhash\n  const hash = rgbaToThumbHash(w, h, data);\n\t// convert it to base64\n  const base64 = Buffer.from(hash).toString('base64');\n  return base64;\n}\n","language":"ts","highlightedLines":[]}]}]]}],["$","script",null,{"type":"application/ld+json","dangerouslySetInnerHTML":{"__html":"{\"@context\":\"http://schema.org/\",\"@type\":\"Article\",\"author\":{\"@type\":\"Person\",\"name\":\"Трофимов Евгений\"},\"headline\":\"Progressive images при помощи base64 миниатюр\"}"}}]]
d:["slug","progressive-images-using-thumbhash","d"]
3:["$","div",null,{"children":[["$","$L7",null,{"href":"/blog","className":"mb-8 block","children":"← Блог"}],["$","div",null,{"children":[["$","section",null,{"className":"overflow-hidden","children":["$","header",null,{"className":"py-8 border-t-[6px] border-b-2 dark:border-night md:mb-10","children":[["$","h1",null,{"className":"text-2xl font-primary block mb-4","children":"Progressive images при помощи base64 миниатюр"}],["$","h2",null,{"className":"font-primary text-md font-normal block mb-8 dark:text-beige text-gray-600","children":"Прогрессивная загрузка изображений при помощи создания миниатюр в thumbhash и их использование в React"}],["$","div",null,{"className":"flex gap-2 flex-wrap gap-y-1","children":[["$","$L7","images",{"href":"/blog/topics/images","legacyBehavior":true,"passHref":true,"children":["$","a",null,{"className":"bg-gray-50/20 dark:bg-beige/5 rounded-3xl dark:text-beige inline-flex items-center text-body2 px-3 py-[6px] border-2 border-gray-50/50 dark:border-night text-gray-500","children":["$undefined","images"]}]}],["$","$L7","react",{"href":"/blog/topics/react","legacyBehavior":true,"passHref":true,"children":["$","a",null,{"className":"bg-gray-50/20 dark:bg-beige/5 rounded-3xl dark:text-beige inline-flex items-center text-body2 px-3 py-[6px] border-2 border-gray-50/50 dark:border-night text-gray-500","children":["$undefined","react"]}]}],["$","$L7","node.js",{"href":"/blog/topics/node.js","legacyBehavior":true,"passHref":true,"children":["$","a",null,{"className":"bg-gray-50/20 dark:bg-beige/5 rounded-3xl dark:text-beige inline-flex items-center text-body2 px-3 py-[6px] border-2 border-gray-50/50 dark:border-night text-gray-500","children":["$undefined","node.js"]}]}]]}],["$","time",null,{"className":"text-body2 text-lilac block mt-4","children":"22 января 2024"}]]}]}],["$","div",null,{"className":"flex flex-col md:grid md:grid-cols-12 gap-5","children":[["$","div",null,{"className":"styles_blogContent__54hPI md:col-span-8","id":"content","children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$d","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/e41f5598c8b4cc3e.css","precedence":"next","crossOrigin":""}]]}]}],["$","aside",null,{"className":"md:col-start-10 md:col-span-2 md:sticky top-4 self-start shrink-0 order-first md:order-last","children":["$","$Le",null,{"contentId":"content"}]}]]}]]}]]}]
9:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Progressive images при помощи base64 миниатюр"}],["$","meta","3",{"name":"description","content":"Прогрессивная загрузка изображений при помощи создания миниатюр в thumbhash и их использование в React"}],["$","link","4",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
